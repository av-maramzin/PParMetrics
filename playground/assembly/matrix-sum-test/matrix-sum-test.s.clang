; ModuleID = '/home/s1736883/Work/PParMetrics/playground/sources/matrix-sum-test.cpp'
source_filename = "/home/s1736883/Work/PParMetrics/playground/sources/matrix-sum-test.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [12 x i8] c"Experiment \00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c" passed!\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c" failed!\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_matrix_sum_test.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define void @_Z4swapRjS_(i32* dereferenceable(4) %a, i32* dereferenceable(4) %b) #4 {
entry:
  %a.addr = alloca i32*, align 8
  %b.addr = alloca i32*, align 8
  %tmp = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 8
  store i32* %b, i32** %b.addr, align 8
  %0 = load i32*, i32** %a.addr, align 8
  %1 = load i32, i32* %0, align 4
  store i32 %1, i32* %tmp, align 4
  %2 = load i32*, i32** %b.addr, align 8
  %3 = load i32, i32* %2, align 4
  %4 = load i32*, i32** %a.addr, align 8
  store i32 %3, i32* %4, align 4
  %5 = load i32, i32* %tmp, align 4
  %6 = load i32*, i32** %b.addr, align 8
  store i32 %5, i32* %6, align 4
  ret void
}

; Function Attrs: noinline optnone uwtable
define i32 @_Z16get_matrix_valuePPjjj(i32** %a, i32 %vsize, i32 %hsize) #5 {
entry:
  %a.addr = alloca i32**, align 8
  %vsize.addr = alloca i32, align 4
  %hsize.addr = alloca i32, align 4
  %total = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca i32**, align 8
  store i32** %a, i32*** %a.addr, align 8
  store i32 %vsize, i32* %vsize.addr, align 4
  store i32 %hsize, i32* %hsize.addr, align 4
  store i32 0, i32* %total, align 4
  %0 = load i32, i32* %vsize.addr, align 4
  %conv = zext i32 %0 to i64
  %1 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv, i64 8)
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  %4 = select i1 %2, i64 -1, i64 %3
  %call = call i8* @_Znam(i64 %4) #10
  %5 = bitcast i8* %call to i32**
  store i32** %5, i32*** %b, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %vsize.addr, align 4
  %cmp = icmp ult i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %hsize.addr, align 4
  %conv1 = zext i32 %8 to i64
  %9 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv1, i64 4)
  %10 = extractvalue { i64, i1 } %9, 1
  %11 = extractvalue { i64, i1 } %9, 0
  %12 = select i1 %10, i64 -1, i64 %11
  %call2 = call i8* @_Znam(i64 %12) #10
  %13 = bitcast i8* %call2 to i32*
  %14 = load i32**, i32*** %b, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom = zext i32 %15 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %14, i64 %idxprom
  store i32* %13, i32** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %vsize.addr, align 4
  %cmp4 = icmp ult i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc17, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %hsize.addr, align 4
  %cmp7 = icmp ult i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end19

for.body8:                                        ; preds = %for.cond6
  %21 = load i32**, i32*** %a.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom9 = zext i32 %22 to i64
  %arrayidx10 = getelementptr inbounds i32*, i32** %21, i64 %idxprom9
  %23 = load i32*, i32** %arrayidx10, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom11 = zext i32 %24 to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %23, i64 %idxprom11
  %25 = load i32, i32* %arrayidx12, align 4
  %26 = load i32**, i32*** %b, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom13 = zext i32 %27 to i64
  %arrayidx14 = getelementptr inbounds i32*, i32** %26, i64 %idxprom13
  %28 = load i32*, i32** %arrayidx14, align 8
  %29 = load i32, i32* %j, align 4
  %idxprom15 = zext i32 %29 to i64
  %arrayidx16 = getelementptr inbounds i32, i32* %28, i64 %idxprom15
  store i32 %25, i32* %arrayidx16, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.body8
  %30 = load i32, i32* %j, align 4
  %inc18 = add i32 %30, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond6

for.end19:                                        ; preds = %for.cond6
  br label %for.inc20

for.inc20:                                        ; preds = %for.end19
  %31 = load i32, i32* %i, align 4
  %inc21 = add i32 %31, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc46, %for.end22
  %32 = load i32, i32* %i, align 4
  %33 = load i32, i32* %vsize.addr, align 4
  %cmp24 = icmp ult i32 %32, %33
  br i1 %cmp24, label %for.body25, label %for.end48

for.body25:                                       ; preds = %for.cond23
  store i32 1, i32* %j, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc37, %for.body25
  %34 = load i32, i32* %j, align 4
  %35 = load i32, i32* %hsize.addr, align 4
  %cmp27 = icmp ult i32 %34, %35
  br i1 %cmp27, label %for.body28, label %for.end39

for.body28:                                       ; preds = %for.cond26
  %36 = load i32**, i32*** %b, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom29 = zext i32 %37 to i64
  %arrayidx30 = getelementptr inbounds i32*, i32** %36, i64 %idxprom29
  %38 = load i32*, i32** %arrayidx30, align 8
  %39 = load i32, i32* %j, align 4
  %sub = sub i32 %39, 1
  %idxprom31 = zext i32 %sub to i64
  %arrayidx32 = getelementptr inbounds i32, i32* %38, i64 %idxprom31
  %40 = load i32, i32* %arrayidx32, align 4
  %41 = load i32**, i32*** %b, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom33 = zext i32 %42 to i64
  %arrayidx34 = getelementptr inbounds i32*, i32** %41, i64 %idxprom33
  %43 = load i32*, i32** %arrayidx34, align 8
  %44 = load i32, i32* %j, align 4
  %idxprom35 = zext i32 %44 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %43, i64 %idxprom35
  %45 = load i32, i32* %arrayidx36, align 4
  %add = add i32 %45, %40
  store i32 %add, i32* %arrayidx36, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body28
  %46 = load i32, i32* %j, align 4
  %inc38 = add i32 %46, 1
  store i32 %inc38, i32* %j, align 4
  br label %for.cond26

for.end39:                                        ; preds = %for.cond26
  %47 = load i32**, i32*** %b, align 8
  %48 = load i32, i32* %i, align 4
  %idxprom40 = zext i32 %48 to i64
  %arrayidx41 = getelementptr inbounds i32*, i32** %47, i64 %idxprom40
  %49 = load i32*, i32** %arrayidx41, align 8
  %50 = load i32, i32* %j, align 4
  %sub42 = sub i32 %50, 1
  %idxprom43 = zext i32 %sub42 to i64
  %arrayidx44 = getelementptr inbounds i32, i32* %49, i64 %idxprom43
  %51 = load i32, i32* %arrayidx44, align 4
  %52 = load i32, i32* %total, align 4
  %add45 = add i32 %52, %51
  store i32 %add45, i32* %total, align 4
  br label %for.inc46

for.inc46:                                        ; preds = %for.end39
  %53 = load i32, i32* %i, align 4
  %inc47 = add i32 %53, 1
  store i32 %inc47, i32* %i, align 4
  br label %for.cond23

for.end48:                                        ; preds = %for.cond23
  store i32 0, i32* %i, align 4
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc54, %for.end48
  %54 = load i32, i32* %i, align 4
  %55 = load i32, i32* %vsize.addr, align 4
  %cmp50 = icmp ult i32 %54, %55
  br i1 %cmp50, label %for.body51, label %for.end56

for.body51:                                       ; preds = %for.cond49
  %56 = load i32**, i32*** %b, align 8
  %57 = load i32, i32* %i, align 4
  %idxprom52 = zext i32 %57 to i64
  %arrayidx53 = getelementptr inbounds i32*, i32** %56, i64 %idxprom52
  %58 = load i32*, i32** %arrayidx53, align 8
  %isnull = icmp eq i32* %58, null
  br i1 %isnull, label %delete.end, label %delete.notnull

delete.notnull:                                   ; preds = %for.body51
  %59 = bitcast i32* %58 to i8*
  call void @_ZdaPv(i8* %59) #11
  br label %delete.end

delete.end:                                       ; preds = %delete.notnull, %for.body51
  br label %for.inc54

for.inc54:                                        ; preds = %delete.end
  %60 = load i32, i32* %i, align 4
  %inc55 = add i32 %60, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond49

for.end56:                                        ; preds = %for.cond49
  %61 = load i32**, i32*** %b, align 8
  %isnull57 = icmp eq i32** %61, null
  br i1 %isnull57, label %delete.end59, label %delete.notnull58

delete.notnull58:                                 ; preds = %for.end56
  %62 = bitcast i32** %61 to i8*
  call void @_ZdaPv(i8* %62) #11
  br label %delete.end59

delete.end59:                                     ; preds = %delete.notnull58, %for.end56
  %63 = load i32, i32* %total, align 4
  ret i32 %63
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nobuiltin
declare noalias i8* @_Znam(i64) #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #8

; Function Attrs: noinline norecurse optnone uwtable
define i32 @main() #9 {
entry:
  %retval = alloca i32, align 4
  %experiments = alloca [5 x i32], align 16
  %tmp = alloca i32, align 4
  %a = alloca i32**, align 8
  %i = alloca i32, align 4
  %b = alloca i32**, align 8
  %i4 = alloca i32, align 4
  %c = alloca i32**, align 8
  %i15 = alloca i32, align 4
  %expn = alloca i32, align 4
  %i28 = alloca i32, align 4
  %j = alloca i32, align 4
  %i46 = alloca i32, align 4
  %j50 = alloca i32, align 4
  %i66 = alloca i32, align 4
  %j70 = alloca i32, align 4
  %k = alloca i32, align 4
  %i105 = alloca i32, align 4
  %j109 = alloca i32, align 4
  %j138 = alloca i32, align 4
  %i142 = alloca i32, align 4
  %i176 = alloca i32, align 4
  %i188 = alloca i32, align 4
  %i203 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i64 @time(i64* null) #3
  %conv = trunc i64 %call to i32
  call void @srand(i32 %conv) #3
  %call1 = call i8* @_Znam(i64 800) #10
  %0 = bitcast i8* %call1 to i32**
  store i32** %0, i32*** %a, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %1, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call2 = call i8* @_Znam(i64 4000) #10
  %2 = bitcast i8* %call2 to i32*
  %3 = load i32**, i32*** %a, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = zext i32 %4 to i64
  %arrayidx = getelementptr inbounds i32*, i32** %3, i64 %idxprom
  store i32* %2, i32** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i8* @_Znam(i64 8000) #10
  %6 = bitcast i8* %call3 to i32**
  store i32** %6, i32*** %b, align 8
  store i32 0, i32* %i4, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc11, %for.end
  %7 = load i32, i32* %i4, align 4
  %cmp6 = icmp ult i32 %7, 1000
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond5
  %call8 = call i8* @_Znam(i64 12000) #10
  %8 = bitcast i8* %call8 to i32*
  %9 = load i32**, i32*** %b, align 8
  %10 = load i32, i32* %i4, align 4
  %idxprom9 = zext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds i32*, i32** %9, i64 %idxprom9
  store i32* %8, i32** %arrayidx10, align 8
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %11 = load i32, i32* %i4, align 4
  %inc12 = add i32 %11, 1
  store i32 %inc12, i32* %i4, align 4
  br label %for.cond5

for.end13:                                        ; preds = %for.cond5
  %call14 = call i8* @_Znam(i64 800) #10
  %12 = bitcast i8* %call14 to i32**
  store i32** %12, i32*** %c, align 8
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc22, %for.end13
  %13 = load i32, i32* %i15, align 4
  %cmp17 = icmp ult i32 %13, 100
  br i1 %cmp17, label %for.body18, label %for.end24

for.body18:                                       ; preds = %for.cond16
  %call19 = call i8* @_Znam(i64 12000) #10
  %14 = bitcast i8* %call19 to i32*
  %15 = load i32**, i32*** %c, align 8
  %16 = load i32, i32* %i15, align 4
  %idxprom20 = zext i32 %16 to i64
  %arrayidx21 = getelementptr inbounds i32*, i32** %15, i64 %idxprom20
  store i32* %14, i32** %arrayidx21, align 8
  br label %for.inc22

for.inc22:                                        ; preds = %for.body18
  %17 = load i32, i32* %i15, align 4
  %inc23 = add i32 %17, 1
  store i32 %inc23, i32* %i15, align 4
  br label %for.cond16

for.end24:                                        ; preds = %for.cond16
  store i32 0, i32* %expn, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc173, %for.end24
  %18 = load i32, i32* %expn, align 4
  %cmp26 = icmp ult i32 %18, 5
  br i1 %cmp26, label %for.body27, label %for.end175

for.body27:                                       ; preds = %for.cond25
  store i32 0, i32* %i28, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc43, %for.body27
  %19 = load i32, i32* %i28, align 4
  %cmp30 = icmp ult i32 %19, 100
  br i1 %cmp30, label %for.body31, label %for.end45

for.body31:                                       ; preds = %for.cond29
  store i32 0, i32* %j, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.body31
  %20 = load i32, i32* %j, align 4
  %cmp33 = icmp ult i32 %20, 1000
  br i1 %cmp33, label %for.body34, label %for.end42

for.body34:                                       ; preds = %for.cond32
  %call35 = call i32 @rand() #3
  %rem = urem i32 %call35, 10
  %21 = load i32**, i32*** %a, align 8
  %22 = load i32, i32* %i28, align 4
  %idxprom36 = zext i32 %22 to i64
  %arrayidx37 = getelementptr inbounds i32*, i32** %21, i64 %idxprom36
  %23 = load i32*, i32** %arrayidx37, align 8
  %24 = load i32, i32* %j, align 4
  %idxprom38 = zext i32 %24 to i64
  %arrayidx39 = getelementptr inbounds i32, i32* %23, i64 %idxprom38
  store i32 %rem, i32* %arrayidx39, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body34
  %25 = load i32, i32* %j, align 4
  %inc41 = add i32 %25, 1
  store i32 %inc41, i32* %j, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  br label %for.inc43

for.inc43:                                        ; preds = %for.end42
  %26 = load i32, i32* %i28, align 4
  %inc44 = add i32 %26, 1
  store i32 %inc44, i32* %i28, align 4
  br label %for.cond29

for.end45:                                        ; preds = %for.cond29
  store i32 0, i32* %i46, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc63, %for.end45
  %27 = load i32, i32* %i46, align 4
  %cmp48 = icmp ult i32 %27, 1000
  br i1 %cmp48, label %for.body49, label %for.end65

for.body49:                                       ; preds = %for.cond47
  store i32 0, i32* %j50, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc60, %for.body49
  %28 = load i32, i32* %j50, align 4
  %cmp52 = icmp ult i32 %28, 3000
  br i1 %cmp52, label %for.body53, label %for.end62

for.body53:                                       ; preds = %for.cond51
  %call54 = call i32 @rand() #3
  %rem55 = urem i32 %call54, 10
  %29 = load i32**, i32*** %b, align 8
  %30 = load i32, i32* %i46, align 4
  %idxprom56 = zext i32 %30 to i64
  %arrayidx57 = getelementptr inbounds i32*, i32** %29, i64 %idxprom56
  %31 = load i32*, i32** %arrayidx57, align 8
  %32 = load i32, i32* %j50, align 4
  %idxprom58 = zext i32 %32 to i64
  %arrayidx59 = getelementptr inbounds i32, i32* %31, i64 %idxprom58
  store i32 %rem55, i32* %arrayidx59, align 4
  br label %for.inc60

for.inc60:                                        ; preds = %for.body53
  %33 = load i32, i32* %j50, align 4
  %inc61 = add i32 %33, 1
  store i32 %inc61, i32* %j50, align 4
  br label %for.cond51

for.end62:                                        ; preds = %for.cond51
  br label %for.inc63

for.inc63:                                        ; preds = %for.end62
  %34 = load i32, i32* %i46, align 4
  %inc64 = add i32 %34, 1
  store i32 %inc64, i32* %i46, align 4
  br label %for.cond47

for.end65:                                        ; preds = %for.cond47
  store i32 0, i32* %i66, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc99, %for.end65
  %35 = load i32, i32* %i66, align 4
  %cmp68 = icmp ult i32 %35, 100
  br i1 %cmp68, label %for.body69, label %for.end101

for.body69:                                       ; preds = %for.cond67
  store i32 0, i32* %j70, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.inc96, %for.body69
  %36 = load i32, i32* %j70, align 4
  %cmp72 = icmp ult i32 %36, 3000
  br i1 %cmp72, label %for.body73, label %for.end98

for.body73:                                       ; preds = %for.cond71
  store i32 0, i32* %k, align 4
  br label %for.cond74

for.cond74:                                       ; preds = %for.inc89, %for.body73
  %37 = load i32, i32* %k, align 4
  %cmp75 = icmp ult i32 %37, 1000
  br i1 %cmp75, label %for.body76, label %for.end91

for.body76:                                       ; preds = %for.cond74
  %38 = load i32**, i32*** %a, align 8
  %39 = load i32, i32* %i66, align 4
  %idxprom77 = zext i32 %39 to i64
  %arrayidx78 = getelementptr inbounds i32*, i32** %38, i64 %idxprom77
  %40 = load i32*, i32** %arrayidx78, align 8
  %41 = load i32, i32* %k, align 4
  %idxprom79 = zext i32 %41 to i64
  %arrayidx80 = getelementptr inbounds i32, i32* %40, i64 %idxprom79
  %42 = load i32, i32* %arrayidx80, align 4
  %43 = load i32**, i32*** %b, align 8
  %44 = load i32, i32* %k, align 4
  %idxprom81 = zext i32 %44 to i64
  %arrayidx82 = getelementptr inbounds i32*, i32** %43, i64 %idxprom81
  %45 = load i32*, i32** %arrayidx82, align 8
  %46 = load i32, i32* %j70, align 4
  %idxprom83 = zext i32 %46 to i64
  %arrayidx84 = getelementptr inbounds i32, i32* %45, i64 %idxprom83
  %47 = load i32, i32* %arrayidx84, align 4
  %mul = mul i32 %42, %47
  %48 = load i32**, i32*** %c, align 8
  %49 = load i32, i32* %i66, align 4
  %idxprom85 = zext i32 %49 to i64
  %arrayidx86 = getelementptr inbounds i32*, i32** %48, i64 %idxprom85
  %50 = load i32*, i32** %arrayidx86, align 8
  %51 = load i32, i32* %j70, align 4
  %idxprom87 = zext i32 %51 to i64
  %arrayidx88 = getelementptr inbounds i32, i32* %50, i64 %idxprom87
  store i32 %mul, i32* %arrayidx88, align 4
  br label %for.inc89

for.inc89:                                        ; preds = %for.body76
  %52 = load i32, i32* %k, align 4
  %inc90 = add i32 %52, 1
  store i32 %inc90, i32* %k, align 4
  br label %for.cond74

for.end91:                                        ; preds = %for.cond74
  %53 = load i32**, i32*** %c, align 8
  %54 = load i32, i32* %i66, align 4
  %idxprom92 = zext i32 %54 to i64
  %arrayidx93 = getelementptr inbounds i32*, i32** %53, i64 %idxprom92
  %55 = load i32*, i32** %arrayidx93, align 8
  %56 = load i32, i32* %j70, align 4
  %idxprom94 = zext i32 %56 to i64
  %arrayidx95 = getelementptr inbounds i32, i32* %55, i64 %idxprom94
  %57 = load i32, i32* %arrayidx95, align 4
  %add = add i32 %57, 1
  store i32 %add, i32* %arrayidx95, align 4
  br label %for.inc96

for.inc96:                                        ; preds = %for.end91
  %58 = load i32, i32* %j70, align 4
  %inc97 = add i32 %58, 1
  store i32 %inc97, i32* %j70, align 4
  br label %for.cond71

for.end98:                                        ; preds = %for.cond71
  br label %for.inc99

for.inc99:                                        ; preds = %for.end98
  %59 = load i32, i32* %i66, align 4
  %inc100 = add i32 %59, 1
  store i32 %inc100, i32* %i66, align 4
  br label %for.cond67

for.end101:                                       ; preds = %for.cond67
  %60 = load i32**, i32*** %c, align 8
  %call102 = call i32 @_Z16get_matrix_valuePPjjj(i32** %60, i32 100, i32 3000)
  %61 = load i32, i32* %expn, align 4
  %idxprom103 = zext i32 %61 to i64
  %arrayidx104 = getelementptr inbounds [5 x i32], [5 x i32]* %experiments, i64 0, i64 %idxprom103
  store i32 %call102, i32* %arrayidx104, align 4
  store i32 0, i32* %i105, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc135, %for.end101
  %62 = load i32, i32* %i105, align 4
  %cmp107 = icmp ult i32 %62, 100
  br i1 %cmp107, label %for.body108, label %for.end137

for.body108:                                      ; preds = %for.cond106
  store i32 0, i32* %j109, align 4
  br label %for.cond110

for.cond110:                                      ; preds = %for.inc132, %for.body108
  %63 = load i32, i32* %j109, align 4
  %cmp111 = icmp ult i32 %63, 1500
  br i1 %cmp111, label %for.body112, label %for.end134

for.body112:                                      ; preds = %for.cond110
  %64 = load i32**, i32*** %c, align 8
  %65 = load i32, i32* %i105, align 4
  %idxprom113 = zext i32 %65 to i64
  %arrayidx114 = getelementptr inbounds i32*, i32** %64, i64 %idxprom113
  %66 = load i32*, i32** %arrayidx114, align 8
  %67 = load i32, i32* %j109, align 4
  %idxprom115 = zext i32 %67 to i64
  %arrayidx116 = getelementptr inbounds i32, i32* %66, i64 %idxprom115
  %68 = load i32, i32* %arrayidx116, align 4
  store i32 %68, i32* %tmp, align 4
  %69 = load i32**, i32*** %c, align 8
  %70 = load i32, i32* %i105, align 4
  %idxprom117 = zext i32 %70 to i64
  %arrayidx118 = getelementptr inbounds i32*, i32** %69, i64 %idxprom117
  %71 = load i32*, i32** %arrayidx118, align 8
  %72 = load i32, i32* %j109, align 4
  %sub = sub i32 3000, %72
  %sub119 = sub i32 %sub, 1
  %idxprom120 = zext i32 %sub119 to i64
  %arrayidx121 = getelementptr inbounds i32, i32* %71, i64 %idxprom120
  %73 = load i32, i32* %arrayidx121, align 4
  %74 = load i32**, i32*** %c, align 8
  %75 = load i32, i32* %i105, align 4
  %idxprom122 = zext i32 %75 to i64
  %arrayidx123 = getelementptr inbounds i32*, i32** %74, i64 %idxprom122
  %76 = load i32*, i32** %arrayidx123, align 8
  %77 = load i32, i32* %j109, align 4
  %idxprom124 = zext i32 %77 to i64
  %arrayidx125 = getelementptr inbounds i32, i32* %76, i64 %idxprom124
  store i32 %73, i32* %arrayidx125, align 4
  %78 = load i32, i32* %tmp, align 4
  %79 = load i32**, i32*** %c, align 8
  %80 = load i32, i32* %i105, align 4
  %idxprom126 = zext i32 %80 to i64
  %arrayidx127 = getelementptr inbounds i32*, i32** %79, i64 %idxprom126
  %81 = load i32*, i32** %arrayidx127, align 8
  %82 = load i32, i32* %j109, align 4
  %sub128 = sub i32 3000, %82
  %sub129 = sub i32 %sub128, 1
  %idxprom130 = zext i32 %sub129 to i64
  %arrayidx131 = getelementptr inbounds i32, i32* %81, i64 %idxprom130
  store i32 %78, i32* %arrayidx131, align 4
  br label %for.inc132

for.inc132:                                       ; preds = %for.body112
  %83 = load i32, i32* %j109, align 4
  %inc133 = add i32 %83, 1
  store i32 %inc133, i32* %j109, align 4
  br label %for.cond110

for.end134:                                       ; preds = %for.cond110
  br label %for.inc135

for.inc135:                                       ; preds = %for.end134
  %84 = load i32, i32* %i105, align 4
  %inc136 = add i32 %84, 1
  store i32 %inc136, i32* %i105, align 4
  br label %for.cond106

for.end137:                                       ; preds = %for.cond106
  store i32 0, i32* %j138, align 4
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc158, %for.end137
  %85 = load i32, i32* %j138, align 4
  %cmp140 = icmp ult i32 %85, 3000
  br i1 %cmp140, label %for.body141, label %for.end160

for.body141:                                      ; preds = %for.cond139
  store i32 0, i32* %i142, align 4
  br label %for.cond143

for.cond143:                                      ; preds = %for.inc155, %for.body141
  %86 = load i32, i32* %i142, align 4
  %cmp144 = icmp ult i32 %86, 50
  br i1 %cmp144, label %for.body145, label %for.end157

for.body145:                                      ; preds = %for.cond143
  %87 = load i32**, i32*** %c, align 8
  %88 = load i32, i32* %i142, align 4
  %idxprom146 = zext i32 %88 to i64
  %arrayidx147 = getelementptr inbounds i32*, i32** %87, i64 %idxprom146
  %89 = load i32*, i32** %arrayidx147, align 8
  %90 = load i32, i32* %j138, align 4
  %idxprom148 = zext i32 %90 to i64
  %arrayidx149 = getelementptr inbounds i32, i32* %89, i64 %idxprom148
  %91 = load i32**, i32*** %c, align 8
  %92 = load i32, i32* %i142, align 4
  %sub150 = sub i32 99, %92
  %idxprom151 = zext i32 %sub150 to i64
  %arrayidx152 = getelementptr inbounds i32*, i32** %91, i64 %idxprom151
  %93 = load i32*, i32** %arrayidx152, align 8
  %94 = load i32, i32* %j138, align 4
  %idxprom153 = zext i32 %94 to i64
  %arrayidx154 = getelementptr inbounds i32, i32* %93, i64 %idxprom153
  call void @_Z4swapRjS_(i32* dereferenceable(4) %arrayidx149, i32* dereferenceable(4) %arrayidx154)
  br label %for.inc155

for.inc155:                                       ; preds = %for.body145
  %95 = load i32, i32* %i142, align 4
  %inc156 = add i32 %95, 1
  store i32 %inc156, i32* %i142, align 4
  br label %for.cond143

for.end157:                                       ; preds = %for.cond143
  br label %for.inc158

for.inc158:                                       ; preds = %for.end157
  %96 = load i32, i32* %j138, align 4
  %inc159 = add i32 %96, 1
  store i32 %inc159, i32* %j138, align 4
  br label %for.cond139

for.end160:                                       ; preds = %for.cond139
  %97 = load i32, i32* %expn, align 4
  %idxprom161 = zext i32 %97 to i64
  %arrayidx162 = getelementptr inbounds [5 x i32], [5 x i32]* %experiments, i64 0, i64 %idxprom161
  %98 = load i32, i32* %arrayidx162, align 4
  %99 = load i32**, i32*** %c, align 8
  %call163 = call i32 @_Z16get_matrix_valuePPjjj(i32** %99, i32 100, i32 3000)
  %cmp164 = icmp eq i32 %98, %call163
  br i1 %cmp164, label %if.then, label %if.else

if.then:                                          ; preds = %for.end160
  %call165 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  %100 = load i32, i32* %expn, align 4
  %call166 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEj(%"class.std::basic_ostream"* %call165, i32 %100)
  %call167 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call166, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0))
  %call168 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %call167, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %if.end

if.else:                                          ; preds = %for.end160
  %call169 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  %101 = load i32, i32* %expn, align 4
  %call170 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEj(%"class.std::basic_ostream"* %call169, i32 %101)
  %call171 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call170, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0))
  %call172 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %call171, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc173

for.inc173:                                       ; preds = %if.end
  %102 = load i32, i32* %expn, align 4
  %inc174 = add i32 %102, 1
  store i32 %inc174, i32* %expn, align 4
  br label %for.cond25

for.end175:                                       ; preds = %for.cond25
  store i32 0, i32* %i176, align 4
  br label %for.cond177

for.cond177:                                      ; preds = %for.inc182, %for.end175
  %103 = load i32, i32* %i176, align 4
  %cmp178 = icmp ult i32 %103, 100
  br i1 %cmp178, label %for.body179, label %for.end184

for.body179:                                      ; preds = %for.cond177
  %104 = load i32**, i32*** %a, align 8
  %105 = load i32, i32* %i176, align 4
  %idxprom180 = zext i32 %105 to i64
  %arrayidx181 = getelementptr inbounds i32*, i32** %104, i64 %idxprom180
  %106 = load i32*, i32** %arrayidx181, align 8
  %isnull = icmp eq i32* %106, null
  br i1 %isnull, label %delete.end, label %delete.notnull

delete.notnull:                                   ; preds = %for.body179
  %107 = bitcast i32* %106 to i8*
  call void @_ZdaPv(i8* %107) #11
  br label %delete.end

delete.end:                                       ; preds = %delete.notnull, %for.body179
  br label %for.inc182

for.inc182:                                       ; preds = %delete.end
  %108 = load i32, i32* %i176, align 4
  %inc183 = add i32 %108, 1
  store i32 %inc183, i32* %i176, align 4
  br label %for.cond177

for.end184:                                       ; preds = %for.cond177
  %109 = load i32**, i32*** %a, align 8
  %isnull185 = icmp eq i32** %109, null
  br i1 %isnull185, label %delete.end187, label %delete.notnull186

delete.notnull186:                                ; preds = %for.end184
  %110 = bitcast i32** %109 to i8*
  call void @_ZdaPv(i8* %110) #11
  br label %delete.end187

delete.end187:                                    ; preds = %delete.notnull186, %for.end184
  store i32 0, i32* %i188, align 4
  br label %for.cond189

for.cond189:                                      ; preds = %for.inc197, %delete.end187
  %111 = load i32, i32* %i188, align 4
  %cmp190 = icmp ult i32 %111, 1000
  br i1 %cmp190, label %for.body191, label %for.end199

for.body191:                                      ; preds = %for.cond189
  %112 = load i32**, i32*** %b, align 8
  %113 = load i32, i32* %i188, align 4
  %idxprom192 = zext i32 %113 to i64
  %arrayidx193 = getelementptr inbounds i32*, i32** %112, i64 %idxprom192
  %114 = load i32*, i32** %arrayidx193, align 8
  %isnull194 = icmp eq i32* %114, null
  br i1 %isnull194, label %delete.end196, label %delete.notnull195

delete.notnull195:                                ; preds = %for.body191
  %115 = bitcast i32* %114 to i8*
  call void @_ZdaPv(i8* %115) #11
  br label %delete.end196

delete.end196:                                    ; preds = %delete.notnull195, %for.body191
  br label %for.inc197

for.inc197:                                       ; preds = %delete.end196
  %116 = load i32, i32* %i188, align 4
  %inc198 = add i32 %116, 1
  store i32 %inc198, i32* %i188, align 4
  br label %for.cond189

for.end199:                                       ; preds = %for.cond189
  %117 = load i32**, i32*** %b, align 8
  %isnull200 = icmp eq i32** %117, null
  br i1 %isnull200, label %delete.end202, label %delete.notnull201

delete.notnull201:                                ; preds = %for.end199
  %118 = bitcast i32** %117 to i8*
  call void @_ZdaPv(i8* %118) #11
  br label %delete.end202

delete.end202:                                    ; preds = %delete.notnull201, %for.end199
  store i32 0, i32* %i203, align 4
  br label %for.cond204

for.cond204:                                      ; preds = %for.inc212, %delete.end202
  %119 = load i32, i32* %i203, align 4
  %cmp205 = icmp ult i32 %119, 100
  br i1 %cmp205, label %for.body206, label %for.end214

for.body206:                                      ; preds = %for.cond204
  %120 = load i32**, i32*** %c, align 8
  %121 = load i32, i32* %i203, align 4
  %idxprom207 = zext i32 %121 to i64
  %arrayidx208 = getelementptr inbounds i32*, i32** %120, i64 %idxprom207
  %122 = load i32*, i32** %arrayidx208, align 8
  %isnull209 = icmp eq i32* %122, null
  br i1 %isnull209, label %delete.end211, label %delete.notnull210

delete.notnull210:                                ; preds = %for.body206
  %123 = bitcast i32* %122 to i8*
  call void @_ZdaPv(i8* %123) #11
  br label %delete.end211

delete.end211:                                    ; preds = %delete.notnull210, %for.body206
  br label %for.inc212

for.inc212:                                       ; preds = %delete.end211
  %124 = load i32, i32* %i203, align 4
  %inc213 = add i32 %124, 1
  store i32 %inc213, i32* %i203, align 4
  br label %for.cond204

for.end214:                                       ; preds = %for.cond204
  %125 = load i32**, i32*** %c, align 8
  %isnull215 = icmp eq i32** %125, null
  br i1 %isnull215, label %delete.end217, label %delete.notnull216

delete.notnull216:                                ; preds = %for.end214
  %126 = bitcast i32** %125 to i8*
  call void @_ZdaPv(i8* %126) #11
  br label %delete.end217

delete.end217:                                    ; preds = %delete.notnull216, %for.end214
  ret i32 0
}

; Function Attrs: nounwind
declare void @srand(i32) #2

; Function Attrs: nounwind
declare i64 @time(i64*) #2

; Function Attrs: nounwind
declare i32 @rand() #2

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEj(%"class.std::basic_ostream"*, i32) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_matrix_sum_test.cpp() #0 section ".text.startup" {
entry:
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (https://git.llvm.org/git/clang.git/ ff0c0d8ab3e316bb6e2741fedb3b545e198eab7a) (https://git.llvm.org/git/llvm.git/ 089d4c0c490687db6c75f1d074e99c4d42936a50)"}
