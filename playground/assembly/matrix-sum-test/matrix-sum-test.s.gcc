	.file	"matrix-sum-test.cpp"
	.section	.rodata
	.type	_ZStL19piecewise_construct, @object
	.size	_ZStL19piecewise_construct, 1
_ZStL19piecewise_construct:
	.zero	1
	.local	_ZStL8__ioinit
	.comm	_ZStL8__ioinit,1,1
	.align 4
	.type	_ZL7a_hsize, @object
	.size	_ZL7a_hsize, 4
_ZL7a_hsize:
	.long	1000
	.align 4
	.type	_ZL7a_vsize, @object
	.size	_ZL7a_vsize, 4
_ZL7a_vsize:
	.long	100
	.align 4
	.type	_ZL7b_hsize, @object
	.size	_ZL7b_hsize, 4
_ZL7b_hsize:
	.long	3000
	.align 4
	.type	_ZL7b_vsize, @object
	.size	_ZL7b_vsize, 4
_ZL7b_vsize:
	.long	1000
	.align 4
	.type	_ZL7c_hsize, @object
	.size	_ZL7c_hsize, 4
_ZL7c_hsize:
	.long	3000
	.align 4
	.type	_ZL7c_vsize, @object
	.size	_ZL7c_vsize, 4
_ZL7c_vsize:
	.long	100
	.align 4
	.type	_ZL5range, @object
	.size	_ZL5range, 4
_ZL5range:
	.long	10
	.align 4
	.type	_ZL15experiments_num, @object
	.size	_ZL15experiments_num, 4
_ZL15experiments_num:
	.long	5
	.text
	.globl	_Z4swapRjS_
	.type	_Z4swapRjS_, @function
_Z4swapRjS_:
.LFB1705:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, (%rax)
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, (%rax)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1705:
	.size	_Z4swapRjS_, .-_Z4swapRjS_
	.globl	_Z16get_matrix_valuePPjjj
	.type	_Z16get_matrix_valuePPjjj, @function
_Z16get_matrix_valuePPjjj:
.LFB1706:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	-60(%rbp), %eax
	movabsq	$1152921504606846975, %rdx
	cmpq	%rdx, %rax
	ja	.L3
	salq	$3, %rax
	movq	%rax, %rdi
	call	_Znam
	movq	%rax, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L8
.L3:
	call	__cxa_throw_bad_array_new_length
.L8:
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jnb	.L5
	movl	-64(%rbp), %eax
	movabsq	$2305843009213693950, %rdx
	cmpq	%rdx, %rax
	ja	.L6
	salq	$2, %rax
	jmp	.L22
.L6:
	call	__cxa_throw_bad_array_new_length
.L22:
	movl	-32(%rbp), %edx
	leaq	0(,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	leaq	(%rcx,%rdx), %rbx
	movq	%rax, %rdi
	call	_Znam
	movq	%rax, (%rbx)
	addl	$1, -32(%rbp)
	jmp	.L8
.L5:
	movl	$0, -32(%rbp)
.L12:
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jnb	.L9
	movl	$0, -28(%rbp)
.L11:
	movl	-28(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jnb	.L10
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	-32(%rbp), %edx
	leaq	0(,%rdx,8), %rcx
	movq	-24(%rbp), %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rdx
	movl	-28(%rbp), %ecx
	salq	$2, %rcx
	addq	%rcx, %rdx
	movl	(%rax), %eax
	movl	%eax, (%rdx)
	addl	$1, -28(%rbp)
	jmp	.L11
.L10:
	addl	$1, -32(%rbp)
	jmp	.L12
.L9:
	movl	$0, -32(%rbp)
.L16:
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jnb	.L13
	movl	$1, -28(%rbp)
.L15:
	movl	-28(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jnb	.L14
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %ecx
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %edx
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rsi
	movq	-24(%rbp), %rax
	addq	%rsi, %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %esi
	salq	$2, %rsi
	addq	%rsi, %rax
	addl	%ecx, %edx
	movl	%edx, (%rax)
	addl	$1, -28(%rbp)
	jmp	.L15
.L14:
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	addl	%eax, -36(%rbp)
	addl	$1, -32(%rbp)
	jmp	.L16
.L13:
	movl	$0, -32(%rbp)
.L19:
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jnb	.L17
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L18
	movl	-32(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L18:
	addl	$1, -32(%rbp)
	jmp	.L19
.L17:
	cmpq	$0, -24(%rbp)
	je	.L20
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L20:
	movl	-36(%rbp), %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1706:
	.size	_Z16get_matrix_valuePPjjj, .-_Z16get_matrix_valuePPjjj
	.section	.rodata
.LC0:
	.string	"Experiment "
.LC1:
	.string	" passed!"
.LC2:
	.string	" failed!"
	.text
	.globl	main
	.type	main, @function
main:
.LFB1707:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset 3, -24
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movl	$0, %edi
	call	time
	movl	%eax, %edi
	call	srand
	movl	$800, %edi
	call	_Znam
	movq	%rax, -72(%rbp)
	movl	$0, -148(%rbp)
.L25:
	cmpl	$99, -148(%rbp)
	ja	.L24
	movl	-148(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movl	$4000, %edi
	call	_Znam
	movq	%rax, (%rbx)
	addl	$1, -148(%rbp)
	jmp	.L25
.L24:
	movl	$8000, %edi
	call	_Znam
	movq	%rax, -64(%rbp)
	movl	$0, -144(%rbp)
.L27:
	cmpl	$999, -144(%rbp)
	ja	.L26
	movl	-144(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movl	$12000, %edi
	call	_Znam
	movq	%rax, (%rbx)
	addl	$1, -144(%rbp)
	jmp	.L27
.L26:
	movl	$800, %edi
	call	_Znam
	movq	%rax, -56(%rbp)
	movl	$0, -140(%rbp)
.L29:
	cmpl	$99, -140(%rbp)
	ja	.L28
	movl	-140(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movl	$12000, %edi
	call	_Znam
	movq	%rax, (%rbx)
	addl	$1, -140(%rbp)
	jmp	.L29
.L28:
	movl	$0, -136(%rbp)
.L55:
	cmpl	$4, -136(%rbp)
	ja	.L30
	movl	$0, -132(%rbp)
.L34:
	cmpl	$99, -132(%rbp)
	ja	.L31
	movl	$0, -128(%rbp)
.L33:
	cmpl	$999, -128(%rbp)
	ja	.L32
	call	rand
	movl	%eax, %esi
	movl	-132(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-128(%rbp), %edx
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	movl	$-858993459, %edx
	movl	%esi, %eax
	mull	%edx
	shrl	$3, %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	addl	%eax, %eax
	subl	%eax, %esi
	movl	%esi, %edx
	movl	%edx, (%rcx)
	addl	$1, -128(%rbp)
	jmp	.L33
.L32:
	addl	$1, -132(%rbp)
	jmp	.L34
.L31:
	movl	$0, -124(%rbp)
.L38:
	cmpl	$999, -124(%rbp)
	ja	.L35
	movl	$0, -120(%rbp)
.L37:
	cmpl	$2999, -120(%rbp)
	ja	.L36
	call	rand
	movl	%eax, %esi
	movl	-124(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %edx
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	movl	$-858993459, %edx
	movl	%esi, %eax
	mull	%edx
	shrl	$3, %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	addl	%eax, %eax
	subl	%eax, %esi
	movl	%esi, %edx
	movl	%edx, (%rcx)
	addl	$1, -120(%rbp)
	jmp	.L37
.L36:
	addl	$1, -124(%rbp)
	jmp	.L38
.L35:
	movl	$0, -116(%rbp)
.L44:
	cmpl	$99, -116(%rbp)
	ja	.L39
	movl	$0, -112(%rbp)
.L43:
	cmpl	$2999, -112(%rbp)
	ja	.L40
	movl	$0, -108(%rbp)
.L42:
	cmpl	$999, -108(%rbp)
	ja	.L41
	movl	-116(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-108(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %ecx
	movl	-108(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-112(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	-116(%rbp), %edx
	leaq	0(,%rdx,8), %rsi
	movq	-56(%rbp), %rdx
	addq	%rsi, %rdx
	movq	(%rdx), %rdx
	movl	-112(%rbp), %esi
	salq	$2, %rsi
	addq	%rsi, %rdx
	imull	%ecx, %eax
	movl	%eax, (%rdx)
	addl	$1, -108(%rbp)
	jmp	.L42
.L41:
	movl	-116(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-112(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %edx
	movl	-116(%rbp), %eax
	leaq	0(,%rax,8), %rcx
	movq	-56(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rax
	movl	-112(%rbp), %ecx
	salq	$2, %rcx
	addq	%rcx, %rax
	addl	$1, %edx
	movl	%edx, (%rax)
	addl	$1, -112(%rbp)
	jmp	.L43
.L40:
	addl	$1, -116(%rbp)
	jmp	.L44
.L39:
	movq	-56(%rbp), %rax
	movl	$3000, %edx
	movl	$100, %esi
	movq	%rax, %rdi
	call	_Z16get_matrix_valuePPjjj
	movl	%eax, %edx
	movl	-136(%rbp), %eax
	movl	%edx, -48(%rbp,%rax,4)
	movl	$0, -104(%rbp)
.L48:
	cmpl	$99, -104(%rbp)
	ja	.L45
	movl	$0, -100(%rbp)
.L47:
	cmpl	$1499, -100(%rbp)
	ja	.L46
	movl	-104(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-100(%rbp), %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	-104(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	$2999, %edx
	subl	-100(%rbp), %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	-104(%rbp), %edx
	leaq	0(,%rdx,8), %rcx
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rdx
	movl	-100(%rbp), %ecx
	salq	$2, %rcx
	addq	%rcx, %rdx
	movl	(%rax), %eax
	movl	%eax, (%rdx)
	movl	-104(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	$2999, %edx
	subl	-100(%rbp), %edx
	movl	%edx, %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-76(%rbp), %eax
	movl	%eax, (%rdx)
	addl	$1, -100(%rbp)
	jmp	.L47
.L46:
	addl	$1, -104(%rbp)
	jmp	.L48
.L45:
	movl	$0, -96(%rbp)
.L52:
	cmpl	$2999, -96(%rbp)
	ja	.L49
	movl	$0, -92(%rbp)
.L51:
	cmpl	$49, -92(%rbp)
	ja	.L50
	movl	$99, %eax
	subl	-92(%rbp), %eax
	movl	%eax, %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-96(%rbp), %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-92(%rbp), %eax
	leaq	0(,%rax,8), %rcx
	movq	-56(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rax
	movl	-96(%rbp), %ecx
	salq	$2, %rcx
	addq	%rcx, %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	_Z4swapRjS_
	addl	$1, -92(%rbp)
	jmp	.L51
.L50:
	addl	$1, -96(%rbp)
	jmp	.L52
.L49:
	movl	-136(%rbp), %eax
	movl	-48(%rbp,%rax,4), %ebx
	movq	-56(%rbp), %rax
	movl	$3000, %edx
	movl	$100, %esi
	movq	%rax, %rdi
	call	_Z16get_matrix_valuePPjjj
	cmpl	%eax, %ebx
	sete	%al
	testb	%al, %al
	je	.L53
	movl	$.LC0, %esi
	movl	$_ZSt4cout, %edi
	call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movq	%rax, %rdx
	movl	-136(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_ZNSolsEj
	movl	$.LC1, %esi
	movq	%rax, %rdi
	call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
	movq	%rax, %rdi
	call	_ZNSolsEPFRSoS_E
	jmp	.L54
.L53:
	movl	$.LC0, %esi
	movl	$_ZSt4cout, %edi
	call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movq	%rax, %rdx
	movl	-136(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_ZNSolsEj
	movl	$.LC2, %esi
	movq	%rax, %rdi
	call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
	movq	%rax, %rdi
	call	_ZNSolsEPFRSoS_E
.L54:
	addl	$1, -136(%rbp)
	jmp	.L55
.L30:
	movl	$0, -88(%rbp)
.L58:
	cmpl	$99, -88(%rbp)
	ja	.L56
	movl	-88(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L57
	movl	-88(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L57:
	addl	$1, -88(%rbp)
	jmp	.L58
.L56:
	cmpq	$0, -72(%rbp)
	je	.L59
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L59:
	movl	$0, -84(%rbp)
.L62:
	cmpl	$999, -84(%rbp)
	ja	.L60
	movl	-84(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L61
	movl	-84(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L61:
	addl	$1, -84(%rbp)
	jmp	.L62
.L60:
	cmpq	$0, -64(%rbp)
	je	.L63
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L63:
	movl	$0, -80(%rbp)
.L66:
	cmpl	$99, -80(%rbp)
	ja	.L64
	movl	-80(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L65
	movl	-80(%rbp), %eax
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L65:
	addl	$1, -80(%rbp)
	jmp	.L66
.L64:
	cmpq	$0, -56(%rbp)
	je	.L67
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	_ZdaPv
.L67:
	movl	$0, %eax
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L69
	call	__stack_chk_fail
.L69:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1707:
	.size	main, .-main
	.type	_Z41__static_initialization_and_destruction_0ii, @function
_Z41__static_initialization_and_destruction_0ii:
.LFB2197:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	cmpl	$1, -4(%rbp)
	jne	.L72
	cmpl	$65535, -8(%rbp)
	jne	.L72
	movl	$_ZStL8__ioinit, %edi
	call	_ZNSt8ios_base4InitC1Ev
	movl	$__dso_handle, %edx
	movl	$_ZStL8__ioinit, %esi
	movl	$_ZNSt8ios_base4InitD1Ev, %edi
	call	__cxa_atexit
.L72:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2197:
	.size	_Z41__static_initialization_and_destruction_0ii, .-_Z41__static_initialization_and_destruction_0ii
	.type	_GLOBAL__sub_I__Z4swapRjS_, @function
_GLOBAL__sub_I__Z4swapRjS_:
.LFB2198:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$65535, %esi
	movl	$1, %edi
	call	_Z41__static_initialization_and_destruction_0ii
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2198:
	.size	_GLOBAL__sub_I__Z4swapRjS_, .-_GLOBAL__sub_I__Z4swapRjS_
	.section	.init_array,"aw"
	.align 8
	.quad	_GLOBAL__sub_I__Z4swapRjS_
	.hidden	__dso_handle
	.ident	"GCC: (Ubuntu 7.2.0-1ubuntu1~16.04) 7.2.0"
	.section	.note.GNU-stack,"",@progbits
