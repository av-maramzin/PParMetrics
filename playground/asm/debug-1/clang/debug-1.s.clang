; ModuleID = '/home/s1736883/Work/PParMetrics/playground/src/debug-1.cpp'
source_filename = "/home/s1736883/Work/PParMetrics/playground/src/debug-1.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_debug_1.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline norecurse nounwind uwtable
define dso_local i32 @main() #4 {
entry:
  %retval = alloca i32, align 4
  %x1 = alloca [100 x [100 x [100 x double]]], align 16
  %x2 = alloca [100 x [100 x [100 x double]]], align 16
  %y = alloca [100 x [100 x [100 x double]]], align 16
  %ix = alloca i32, align 4
  %iz = alloca i32, align 4
  %ip = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %iz, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc27, %entry
  %0 = load i32, i32* %iz, align 4
  %cmp = icmp slt i32 %0, 100
  br i1 %cmp, label %for.body, label %for.end29

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %ix, align 4
  %cmp2 = icmp slt i32 %1, 100
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %iz, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [100 x [100 x [100 x double]]], [100 x [100 x [100 x double]]]* %x1, i64 0, i64 %idxprom
  %arrayidx4 = getelementptr inbounds [100 x [100 x double]], [100 x [100 x double]]* %arrayidx, i64 0, i64 0
  %3 = load i32, i32* %ix, align 4
  %idxprom5 = sext i32 %3 to i64
  %arrayidx6 = getelementptr inbounds [100 x double], [100 x double]* %arrayidx4, i64 0, i64 %idxprom5
  %4 = load double, double* %arrayidx6, align 8
  %5 = load i32, i32* %iz, align 4
  %idxprom7 = sext i32 %5 to i64
  %arrayidx8 = getelementptr inbounds [100 x [100 x [100 x double]]], [100 x [100 x [100 x double]]]* %y, i64 0, i64 %idxprom7
  %arrayidx9 = getelementptr inbounds [100 x [100 x double]], [100 x [100 x double]]* %arrayidx8, i64 0, i64 0
  %6 = load i32, i32* %ix, align 4
  %idxprom10 = sext i32 %6 to i64
  %arrayidx11 = getelementptr inbounds [100 x double], [100 x double]* %arrayidx9, i64 0, i64 %idxprom10
  store double %4, double* %arrayidx11, align 8
  %7 = load i32, i32* %iz, align 4
  %idxprom12 = sext i32 %7 to i64
  %arrayidx13 = getelementptr inbounds [100 x [100 x [100 x double]]], [100 x [100 x [100 x double]]]* %y, i64 0, i64 %idxprom12
  %arrayidx14 = getelementptr inbounds [100 x [100 x double]], [100 x [100 x double]]* %arrayidx13, i64 0, i64 1
  %8 = load i32, i32* %ix, align 4
  %idxprom15 = sext i32 %8 to i64
  %arrayidx16 = getelementptr inbounds [100 x double], [100 x double]* %arrayidx14, i64 0, i64 %idxprom15
  store double 0.000000e+00, double* %arrayidx16, align 8
  %9 = load i32, i32* %iz, align 4
  %idxprom17 = sext i32 %9 to i64
  %arrayidx18 = getelementptr inbounds [100 x [100 x [100 x double]]], [100 x [100 x [100 x double]]]* %x1, i64 0, i64 %idxprom17
  %arrayidx19 = getelementptr inbounds [100 x [100 x double]], [100 x [100 x double]]* %arrayidx18, i64 0, i64 99
  %10 = load i32, i32* %ix, align 4
  %idxprom20 = sext i32 %10 to i64
  %arrayidx21 = getelementptr inbounds [100 x double], [100 x double]* %arrayidx19, i64 0, i64 %idxprom20
  %11 = load double, double* %arrayidx21, align 8
  %12 = load i32, i32* %iz, align 4
  %idxprom22 = sext i32 %12 to i64
  %arrayidx23 = getelementptr inbounds [100 x [100 x [100 x double]]], [100 x [100 x [100 x double]]]* %y, i64 0, i64 %idxprom22
  %arrayidx24 = getelementptr inbounds [100 x [100 x double]], [100 x [100 x double]]* %arrayidx23, i64 0, i64 2
  %13 = load i32, i32* %ix, align 4
  %idxprom25 = sext i32 %13 to i64
  %arrayidx26 = getelementptr inbounds [100 x double], [100 x double]* %arrayidx24, i64 0, i64 %idxprom25
  store double %11, double* %arrayidx26, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc27

for.inc27:                                        ; preds = %for.end
  %15 = load i32, i32* %iz, align 4
  %inc28 = add nsw i32 %15, 1
  store i32 %inc28, i32* %iz, align 4
  br label %for.cond

for.end29:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_debug_1.cpp() #0 section ".text.startup" {
entry:
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.1 (https://git.llvm.org/git/clang.git/ e44b4e4240e03c24f5479f81235519493823c27b) (https://git.llvm.org/git/llvm.git/ 08f7943cf05b989e05297fea48e2464f5af11bf1)"}
